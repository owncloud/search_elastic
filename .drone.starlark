config = {
	'app': 'search_elastic',
	'rocketchat': 'builds',

	'branches': [
		'master'
	],

	'appInstallCommand': 'make',

	'codestyle': True,

	'phpstan': {
		'ordinary' : {
			'phpVersions': [
				'7.1',
				'7.2',
				'7.3',
			],
		},
	},

	'phan': True,

	'phpunit': {
		'allDatabases' : {
			'phpVersions': [
				'7.0',
			]
		},
		'reducedDatabases' : {
			'phpVersions': [
				'7.1',
				'7.2',
				'7.3',
			],
			'databases': [
				'sqlite',
				'mariadb:10.2',
			],
			'coverage': False
		},
	},

	'acceptance': {
		'webUI': {
			'suites': {
				'webUISearchElastic': 'webUISearchElastic',
			},
			'browsers': [
				'chrome',
				'firefox'
			],
		},
		'api': {
			'suites': [
				'apiLimitSearches',
				'apiSearchElastic'
			],
		},
	},

	'defaults': {
		'acceptance': {
			'databases': [
				'mysql:5.7'
			],
			'extraSetup': {
				'name': 'configure-app',
				'image': 'owncloudci/php:7.0',
				'pull': 'always',
				'commands': [
					'cd /var/www/owncloud/server',
					'php occ config:app:set search_elastic servers --value elasticsearch',
					'php occ search:index:reset --force'
				]
			},
			'extraServices': [
				{
					'name': 'elasticsearch',
					'image': 'owncloudci/elasticsearch',
					'pull': 'always',
				}
			]
		},
	}
}

def main(ctx):
	before = beforePipelines()

	stages = stagePipelines()
	if (stages == False):
		print('Errors detected. Review messages above.')
		return []

	dependsOn(before, stages)

	after = afterPipelines()
	dependsOn(stages, after)

	return before + stages + after

def beforePipelines():
	return codestyle() + javascript() + phpstan() + phan()

def stagePipelines():
	phpunitPipelines = phpunit()
	acceptancePipelines = acceptance()
	if (phpunitPipelines == False) or (acceptancePipelines == False):
		return False

	return phpunitPipelines + acceptancePipelines

def afterPipelines():
	return [
		notify()
	]

def codestyle():
	pipelines = []

	if 'codestyle' not in config:
		return pipelines

	default = {
		'phpVersions': ['7.0'],
	}

	if 'defaults' in config:
		if 'codestyle' in config['defaults']:
			if 'phpVersions' in config['defaults']['codestyle']:
				default['phpVersions'] = config['defaults']['codestyle']['phpVersions']

	codestyleConfig = config['codestyle']

	if type(codestyleConfig) == "bool":
		if codestyleConfig:
			# the config has 'codestyle' true, so specify an empty dict that will get the defaults
			codestyleConfig = {}
		else:
			return pipelines

	if len(codestyleConfig) == 0:
		# 'codestyle' is an empty dict, so specify a single section that will get the defaults
		codestyleConfig = {'doDefault': {}}

	for category, matrix in codestyleConfig.items():
		phpVersions = matrix['phpVersions'] if 'phpVersions' in matrix else default['phpVersions']

		for phpVersion in phpVersions:
			name = 'coding-standard-php%s' % phpVersion

			result = {
				'kind': 'pipeline',
				'type': 'docker',
				'name': name,
				'workspace' : {
					'base': '/var/www/owncloud',
					'path': 'server/apps/%s' % config['app']
				},
				'steps': [
					{
						'name': 'coding-standard',
						'image': 'owncloudci/php:%s' % phpVersion,
						'pull': 'always',
						'commands': [
							'make test-php-style'
						]
					}
				],
				'depends_on': [],
				'trigger': {
					'ref': [
						'refs/pull/**',
						'refs/tags/**'
					]
				}
			}

			for branch in config['branches']:
				result['trigger']['ref'].append('refs/heads/%s' % branch)

			pipelines.append(result)

	return pipelines

def phpstan():
	pipelines = []

	if 'phpstan' not in config:
		return pipelines

	default = {
		'phpVersions': ['7.2'],
	}

	if 'defaults' in config:
		if 'phpstan' in config['defaults']:
			if 'phpVersions' in config['defaults']['phpstan']:
				default['phpVersions'] = config['defaults']['phpstan']['phpVersions']

	phpstanConfig = config['phpstan']

	if type(phpstanConfig) == "bool":
		if phpstanConfig:
			# the config has 'phpstan' true, so specify an empty dict that will get the defaults
			phpstanConfig = {}
		else:
			return pipelines

	if len(phpstanConfig) == 0:
		# 'phpstan' is an empty dict, so specify a single section that will get the defaults
		phpstanConfig = {'doDefault': {}}

	for category, matrix in phpstanConfig.items():
		phpVersions = matrix['phpVersions'] if 'phpVersions' in matrix else default['phpVersions']

		for phpVersion in phpVersions:
			name = 'phpstan-php%s' % phpVersion

			result = {
				'kind': 'pipeline',
				'type': 'docker',
				'name': name,
				'workspace' : {
					'base': '/var/www/owncloud',
					'path': 'server/apps/%s' % config['app']
				},
				'steps': [
					installCore('daily-master-qa', 'sqlite'),
					setupServerAndApp(phpVersion),
					{
						'name': 'phpstan',
						'image': 'owncloudci/php:%s' % phpVersion,
						'pull': 'always',
						'commands': [
							'make test-php-phpstan'
						]
					}
				],
				'depends_on': [],
				'trigger': {
					'ref': [
						'refs/pull/**',
						'refs/tags/**'
					]
				}
			}

			for branch in config['branches']:
				result['trigger']['ref'].append('refs/heads/%s' % branch)

			pipelines.append(result)

	return pipelines

def phan():
	pipelines = []

	if 'phan' not in config:
		return pipelines

	default = {
		'phpVersions': ['7.0', '7.1', '7.2', '7.3'],
	}

	if 'defaults' in config:
		if 'phan' in config['defaults']:
			if 'phpVersions' in config['defaults']['phan']:
				default['phpVersions'] = config['defaults']['phan']['phpVersions']

	phanConfig = config['phan']

	if type(phanConfig) == "bool":
		if phanConfig:
			# the config has 'phan' true, so specify an empty dict that will get the defaults
			phanConfig = {}
		else:
			return pipelines

	if len(phanConfig) == 0:
		# 'phan' is an empty dict, so specify a single section that will get the defaults
		phanConfig = {'doDefault': {}}

	for category, matrix in phanConfig.items():
		phpVersions = matrix['phpVersions'] if 'phpVersions' in matrix else default['phpVersions']

		for phpVersion in phpVersions:
			name = 'phan-php%s' % phpVersion

			result = {
				'kind': 'pipeline',
				'type': 'docker',
				'name': name,
				'workspace' : {
					'base': '/var/www/owncloud',
					'path': 'server/apps/%s' % config['app']
				},
				'steps': [
					installCore('daily-master-qa', 'sqlite'),
					{
						'name': 'phan',
						'image': 'owncloudci/php:%s' % phpVersion,
						'pull': 'always',
						'commands': [
							'make test-php-phan'
						]
					}
				],
				'depends_on': [],
				'trigger': {
					'ref': [
						'refs/pull/**',
						'refs/tags/**'
					]
				}
			}

			for branch in config['branches']:
				result['trigger']['ref'].append('refs/heads/%s' % branch)

			pipelines.append(result)

	return pipelines

def javascript():
	if 'javascript' in config:
		doJavascript = config['javascript']
	else:
		doJavascript = False

	if doJavascript == False:
		return []

	result = {
		'kind': 'pipeline',
		'type': 'docker',
		'name': 'javascript-tests',
		'workspace' : {
			'base': '/var/www/owncloud',
			'path': 'server/apps/%s' % config['app']
		},
		'steps': [
			installCore('daily-master-qa', 'sqlite'),
			setupServerAndApp('7.0'),
			{
				'name': 'javascript-tests',
				'image': 'owncloudci/php:7.0',
				'pull': 'always',
				'commands': [
					'make test-js'
				]
			}
		],
		'depends_on': [],
		'trigger': {
			'ref': [
				'refs/pull/**',
				'refs/tags/**'
			]
		}
	}

	for branch in config['branches']:
		result['trigger']['ref'].append('refs/heads/%s' % branch)

	return [result]

def phpunit():
	pipelines = []

	if 'phpunit' not in config:
		return pipelines

	default = {
		'phpVersions': ['7.0', '7.1', '7.2', '7.3'],
		'databases': [
			'sqlite', 'mariadb:10.2', 'mysql:5.5', 'mysql:5.7', 'postgres:9.4', 'oracle'
		],
		'coverage': True,
	}

	if 'defaults' in config:
		if 'phpunit' in config['defaults']:
			if 'databases' in config['defaults']['phpunit']:
				default['databases'] = config['defaults']['phpunit']['databases']
			if 'coverage' in config['defaults']['phpunit']:
				default['databases'] = config['defaults']['phpunit']['coverage']

	phpunitConfig = config['phpunit']

	if type(phpunitConfig) == "bool":
		if phpunitConfig:
			# the config has 'phpunit' true, so specify an empty dict that will get the defaults
			phpunitConfig = {}
		else:
			return pipelines

	if len(phpunitConfig) == 0:
		# 'phpunit' is an empty dict, so specify a single section that will get the defaults
		phpunitConfig = {'doDefault': {}}

	for category, matrix in phpunitConfig.items():
		databases = matrix['databases'] if 'databases' in matrix else default['databases']
		coverage = matrix['coverage'] if 'coverage' in matrix else default['coverage']
		phpVersions = matrix['phpVersions'] if 'phpVersions' in matrix else default['phpVersions']

		for phpVersion in phpVersions:

			if coverage:
				command = 'make test-php-unit-dbg'
			else:
				command = 'make test-php-unit'

			for db in databases:
				result = {
					'kind': 'pipeline',
					'type': 'docker',
					'name': 'phpunit-php%s-%s' % (phpVersion, db.replace(":", "")),
					'workspace' : {
						'base': '/var/www/owncloud',
						'path': 'server/apps/%s' % config['app']
					},
					'steps': [
						installCore('daily-master-qa', db),
						setupServerAndApp(phpVersion),
						{
							'name': 'phpunit-tests',
							'image': 'owncloudci/php:%s' % phpVersion,
							'pull': 'always',
							'commands': [
								command
							]
						}
					],
					'services': databaseService(db),
					'depends_on': [],
					'trigger': {
						'ref': [
							'refs/pull/**',
							'refs/tags/**'
						]
					}
				}

				if coverage:
					result['steps'].append({
						'name': 'codecov-upload',
						'image': 'plugins/codecov:2',
						'pull': 'always',
						'settings': {
							'paths': [
								'tests/output/clover.xml',
							],
							'token': {
								'from_secret': 'codecov_token'
							}
						}
					})

				for branch in config['branches']:
					result['trigger']['ref'].append('refs/heads/%s' % branch)

				pipelines.append(result)

	return pipelines

def acceptance():
	pipelines = []

	if 'acceptance' not in config:
		return pipelines

	errorFound = False

	default = {
		'servers': ['daily-master-qa', '10.2.1'],
		'browsers': ['chrome'],
		'phpVersions': ['7.0'],
		'databases': ['mariadb:10.2'],
		'federatedServerNeeded': False,
		'filterTags': '',
		'emailNeeded': False,
		'extraSetup': None,
		'extraServices': [],
		'extraApps': [],
	}

	if 'defaults' in config:
		if 'acceptance' in config['defaults']:
			if 'servers' in config['defaults']['acceptance']:
				default['databases'] = config['defaults']['acceptance']['servers']
			if 'browsers' in config['defaults']['acceptance']:
				default['databases'] = config['defaults']['acceptance']['browsers']
			if 'phpVersions' in config['defaults']['acceptance']:
				default['databases'] = config['defaults']['acceptance']['phpVersions']
			if 'databases' in config['defaults']['acceptance']:
				default['databases'] = config['defaults']['acceptance']['databases']
			if 'federatedServerNeeded' in config['defaults']['acceptance']:
				default['databases'] = config['defaults']['acceptance']['federatedServerNeeded']
			if 'filterTags' in config['defaults']['acceptance']:
				default['databases'] = config['defaults']['acceptance']['filterTags']
			if 'emailNeeded' in config['defaults']['acceptance']:
				default['emailNeeded'] = config['defaults']['acceptance']['emailNeeded']
			if 'extraSetup' in config['defaults']['acceptance']:
				default['extraSetup'] = config['defaults']['acceptance']['extraSetup']
			if 'extraServices' in config['defaults']['acceptance']:
				default['extraServices'] = config['defaults']['acceptance']['extraServices']
			if 'extraApps' in config['defaults']['acceptance']:
				default['extraApps'] = config['defaults']['acceptance']['extraApps']

	for category, matrix in config['acceptance'].items():
		if type(matrix['suites']) == "list":
			suites = {}
			for suite in matrix['suites']:
				suites[suite] = suite
		else:
			suites = matrix['suites']

		for suite, shortSuiteName in suites.items():
			isWebUI = suite.startswith('webUI')
			isAPI = suite.startswith('api')
			isCLI = suite.startswith('cli')

			if isAPI or isCLI:
				default['browsers'] = ['']

			servers = matrix['servers'] if 'servers' in matrix else default['servers']
			browsers = matrix['browsers'] if 'browsers' in matrix else default['browsers']
			phpVersions = matrix['phpVersions'] if 'phpVersions' in matrix else default['phpVersions']
			databases = matrix['databases'] if 'databases' in matrix else default['databases']
			federatedServerNeeded = matrix['federatedServerNeeded'] if 'federatedServerNeeded' in matrix else default['federatedServerNeeded']
			filterTags = matrix['filterTags'] if 'filterTags' in matrix else default['filterTags']
			emailNeeded = matrix['emailNeeded'] if 'emailNeeded' in matrix else default['emailNeeded']
			extraSetup = matrix['extraSetup'] if 'extraSetup' in matrix else default['extraSetup']
			extraServices = matrix['extraServices'] if 'extraServices' in matrix else default['extraServices']
			extraApps = matrix['extraApps'] if 'extraApps' in matrix else default['extraApps']

			for server in servers:
				for browser in browsers:
					for phpVersion in phpVersions:
						for db in databases:
							name = 'unknown'

							if isWebUI or isAPI or isCLI:
								browserString = '' if browser == '' else '-' + browser
								name = '%s-%s%s-%s-php%s' % (shortSuiteName, server.replace('daily-', '').replace('-qa', ''), browserString, db.replace(':', ''), phpVersion)
								maxLength = 50
								nameLength = len(name)
								if nameLength > maxLength:
									print("Error: generated stage name of length", nameLength, "is not supported. The maximum length is " + str(maxLength) + ".", name)
									errorFound = True

							if isWebUI:
								environment = {
									'TEST_SERVER_URL': 'http://server',
									'BEHAT_FILTER_TAGS': filterTags,
									'BEHAT_SUITE': suite,
									'SELENIUM_HOST': 'selenium',
									'SELENIUM_PORT': '4444',
									'BROWSER': browser,
									'PLATFORM': 'Linux',
								}

							if isAPI or isCLI:
								environment = {
									'TEST_SERVER_URL': 'http://server',
									'BEHAT_FILTER_TAGS': filterTags,
									'BEHAT_SUITE': suite,
								}

							if emailNeeded:
								environment['MAILHOG_HOST'] = 'email'

							result = {
								'kind': 'pipeline',
								'type': 'docker',
								'name': name,
								'workspace' : {
									'base': '/var/www/owncloud',
									'path': 'server/apps/%s' % config['app']
								},
								'steps': [
									installCore(server, db),
									installTestrunner(phpVersion)
								] + ([
									{
										'name': 'install-federation',
										'image': 'owncloudci/core',
										'pull': 'always',
										'settings': {
											'version': server,
											'core_path': '/var/www/owncloud/federated'
										}
									},
									{
										'name': 'configure-federation',
										'image': 'owncloudci/php:%s' % phpVersion,
										'pull': 'always',
										'commands': [
											'echo "export TEST_SERVER_FED_URL=http://federated" > /var/www/owncloud/saved-settings.sh',
											'cd /var/www/owncloud/federated',
											'php occ a:l',
											'php occ a:e testing',
											'php occ a:l',
											'php occ config:system:set trusted_domains 1 --value=federated',
											'php occ log:manage --level 0',
											'php occ config:list'
										]
									}
								] if federatedServerNeeded else []) + [
									setupServerAndApp(phpVersion),
									installExtraApps(phpVersion, extraApps),
									extraSetup,
									fixPermissions(phpVersion),
									({
										'name': 'acceptance-tests',
										'image': 'owncloudci/php:%s' % phpVersion,
										'pull': 'always',
										'environment': environment,
										'commands': [
											'touch /var/www/owncloud/saved-settings.sh',
											'. /var/www/owncloud/saved-settings.sh',
											'cd /var/www/owncloud/testrunner/apps/%s' % config['app'],
											'make test-acceptance-webui'
										]
									} if isWebUI else None),
									({
										'name': 'acceptance-tests',
										'image': 'owncloudci/php:%s' % phpVersion,
										'pull': 'always',
										'environment': environment,
										'commands': [
											'cd /var/www/owncloud/testrunner/apps/%s' % config['app'],
											'make test-acceptance-api'
										]
									} if isAPI else None),
									({
										'name': 'acceptance-tests',
										'image': 'owncloudci/php:%s' % phpVersion,
										'pull': 'always',
										'environment': environment,
										'commands': [
											'cd /var/www/owncloud/testrunner/apps/%s' % config['app'],
											'make test-acceptance-cli'
										]
									} if isCLI else None),
								],
								'services': databaseService(db)
									+ browserService(browser)
									+ emailService(emailNeeded)
									+ extraServices
									+ owncloudService(server, phpVersion, 'server', '/var/www/owncloud/server', False)
									+ (owncloudService(server, phpVersion, 'federated', '/var/www/owncloud/federated', False) if federatedServerNeeded else []),
								'depends_on': [],
								'trigger': {
									'ref': [
										'refs/pull/**',
										'refs/tags/**'
									]
								}
							}

							for branch in config['branches']:
								result['trigger']['ref'].append('refs/heads/%s' % branch)

							pipelines.append(result)

	if errorFound:
		return False

	return pipelines

def notify():
	result = {
		'kind': 'pipeline',
		'type': 'docker',
		'name': 'chat-notifications',
		'clone': {
			'disable': True
		},
		'steps': [
			{
				'name': 'notify-rocketchat',
				'image': 'plugins/slack:1',
				'pull': 'always',
				'settings': {
					'webhook': {
						'from_secret': 'public_rocketchat'
					},
					'channel': config['rocketchat']
				}
			}
		],
		'depends_on': [],
		'trigger': {
			'ref': [
				'refs/tags/**'
			]
		}
	}

	for branch in config['branches']:
		result['trigger']['ref'].append('refs/heads/%s' % branch)

	return result

def databaseService(name):
	if name.startswith('mariadb'):
		return [{
			'name': 'mariadb',
			'image': name,
			'pull': 'always',
			'environment': {
				'MYSQL_USER': 'owncloud',
				'MYSQL_PASSWORD': 'owncloud',
				'MYSQL_DATABASE': 'owncloud',
				'MYSQL_ROOT_PASSWORD': 'owncloud'
			}
		}]

	if name.startswith('mysql'):
		return [{
			'name': 'mysql',
			'image': name,
			'pull': 'always',
			'environment': {
				'MYSQL_USER': 'owncloud',
				'MYSQL_PASSWORD': 'owncloud',
				'MYSQL_DATABASE': 'owncloud',
				'MYSQL_ROOT_PASSWORD': 'owncloud'
			}
		}]

	if name.startswith('postgres'):
		return [{
			'name': 'postgres',
			'image': name,
			'pull': 'always',
			'environment': {
				'POSTGRES_USER': 'owncloud',
				'POSTGRES_PASSWORD': 'owncloud',
				'POSTGRES_DB': 'owncloud'
			}
		}]

	if name.startswith('oracle'):
		return [{
			'name': 'oracle',
			'image': 'deepdiver/docker-oracle-xe-11g:latest',
			'pull': 'always',
			'environment': {
				'ORACLE_USER': 'system',
				'ORACLE_PASSWORD': 'oracle',
				'ORACLE_DB': 'XE',
				'ORACLE_DISABLE_ASYNCH_IO': 'true',
			}
		}]

	return []

def browserService(name):
	if name == 'chrome':
		return [{
			'name': 'selenium',
			'image': 'selenium/standalone-chrome-debug:3.141.59-oxygen',
			'pull': 'always',
			'environment': {
				'JAVA_OPTS': '-Dselenium.LOGGER.level=WARNING'
			}
		}]

	if name == 'firefox':
		return [{
			'name': 'selenium',
			'image': 'selenium/standalone-firefox-debug:3.8.1',
			'pull': 'always',
			'environment': {
				'JAVA_OPTS': '-Dselenium.LOGGER.level=WARNING',
				'SE_OPTS': '-enablePassThrough false'
			}
		}]

	return []

def emailService(emailNeeded):
	if emailNeeded:
		return [{
			'name': 'email',
			'image': 'mailhog/mailhog',
			'pull': 'always',
		}]

	return []

def owncloudService(version, phpVersion, name = 'server', path = '/var/www/owncloud/server', ssl = True):
	if ssl:
		environment = {
			'APACHE_WEBROOT': path,
			'APACHE_CONFIG_TEMPLATE': 'ssl',
			'APACHE_SSL_CERT_CN': 'server',
			'APACHE_SSL_CERT': '/var/www/owncloud/%s.crt' % name,
			'APACHE_SSL_KEY': '/var/www/owncloud/%s.key' % name
		}
	else:
		environment = {
			'APACHE_WEBROOT': path
		}

	return [{
		'name': name,
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'environment': environment,
		'command': [
			'/usr/local/bin/apachectl',
			'-e',
			'debug',
			'-D',
			'FOREGROUND'
		]
	}]

def installCore(version, db):
	host = db.split(':')[0]
	name = host

	username = 'owncloud'
	password = 'owncloud'
	database = 'owncloud'

	if name == 'mariadb':
		name = 'mysql'

	if name == 'postgres':
		name = 'pgsql'

	if name == 'oracle':
		name = 'oci'
		username = 'system'
		password = 'oracle'
		database = 'XE'

	return {
		'name': 'install-core',
		'image': 'owncloudci/core',
		'pull': 'always',
		'settings': {
			'version': version,
			'core_path': '/var/www/owncloud/server',
			'db_type': name,
			'db_name': database,
			'db_host': host,
			'db_username': username,
			'db_password': password
		}
	}

def installTestrunner(phpVersion):
	return {
		'name': 'install-testrunner',
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': [
			'git clone -b master --depth=1 https://github.com/owncloud/core.git /var/www/owncloud/testrunner',
			'cp -r /var/www/owncloud/server/apps/%s /var/www/owncloud/testrunner/apps/' % config['app'],
			'cd /var/www/owncloud/testrunner',
			'make install-composer-deps vendor-bin-deps'
		]
	}

def installExtraApps(phpVersion, extraApps):
	if extraApps == []:
		return None

	commandArray = []
	for app in extraApps:
		commandArray.append('git clone https://github.com/owncloud/%s.git /var/www/owncloud/server/apps/%s' % (app, app))
		commandArray.append('cp -r /var/www/owncloud/server/apps/%s /var/www/owncloud/testrunner/apps/' % app)
		commandArray.append('cd /var/www/owncloud/server')
		commandArray.append('php occ a:l')
		commandArray.append('php occ a:e %s' % app)
		commandArray.append('php occ a:l')

	return {
		'name': 'install-extra-apps',
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': commandArray
	}

def setupServerAndApp(phpVersion):
	return {
		'name': 'setup-server-%s' % config['app'],
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': [
			config['appInstallCommand'] if 'appInstallCommand' in config else ':',
			'cd /var/www/owncloud/server',
			'php occ a:l',
			'php occ a:e %s' % config['app'],
			'php occ a:e testing',
			'php occ a:l',
			'php occ config:system:set trusted_domains 1 --value=server',
			'php occ log:manage --level 0',
		]
	}

def fixPermissions(phpVersion):
	return {
		'name': 'fix-permissions',
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': [
			'chown -R www-data /var/www/owncloud',
			'chmod -R 777 /var/www/owncloud/testrunner/tests/acceptance/filesForUpload',
			'chmod +x /var/www/owncloud/testrunner/tests/acceptance/run.sh'
		]
	}

def dependsOn(earlierStages, nextStages):
	for earlierStage in earlierStages:
		for nextStage in nextStages:
			nextStage['depends_on'].append(earlierStage['name'])
